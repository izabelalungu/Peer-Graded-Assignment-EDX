#imports
!pip install yfinance==0.1.67
!mamba install bs4==4.10.0 -y
!pip install nbformat==4.2.0
import yfinance as yf
import pandas as pd
import requests
from bs4 import BeautifulSoup
import plotly.graph_objects as go
from plotly.subplots import make_subplots

####Question 1: Use yfinance to Extract Stock Data####
#Question text: Using the Ticker function enter the ticker symbol of the stock we want to extract data on to create a ticker object. The stock is Tesla and its ticker symbol is TSLA.
Tesla = yf.Ticker("TSLA")

#Question text: Using the ticker object and the function history extract stock information and save it in a dataframe named tesla_data. Set the period parameter to max so we get information for the maximum amount of time.
tesla_data = Tesla.history(period="max")

#Question text: Reset the index using the reset_index(inplace=True) function on the tesla_data DataFrame and display the first five rows of the tesla_data dataframe using the head function. Take a screenshot of the results and code from the beginning of Question 1 to the results below.
tesla_data.reset_index(inplace=True)
tesla_data.head(5)

####Question 2: Use Webscraping to Extract Tesla Revenue Data####
#Question text: Use the requests library to download the webpage https://cf-coursesdata.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220ENSkillsNetwork/labs/project/revenue.htm Save the text of the response as a variable named html_data.
url="https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/revenue.htm"
html_data=requests.get(url).text

#Question text: Parse the html data using beautiful_soup.
beautiful_soup = BeautifulSoup(html_data,"html.parser")

#Question text: Using BeautifulSoup or the read_html function extract the table with Tesla Quarterly Revenue and store it into a dataframe named tesla_revenue. The dataframe should have columns Date and Revenue
tesla_revenue = pd.DataFrame(columns=["Date", "Revenue"])
for row in beautiful_soup.find("tbody").find_all("tr"):
  col = row.find_all("td")
  date =col[0].text
  revenue =col[1].text
  tesla_revenue = tesla_revenue.append({"Date":date, "Revenue":revenue},ignore_index=True)
  
#Question text: Execute the following line to remove the comma and dollar sign from the Revenue column.
tesla_revenue["Revenue"] = tesla_revenue['Revenue'].str.replace(',|\$',"")

#Question text: Execute the following lines to remove an null or empty strings in the Revenue column.
tesla_revenue.dropna(inplace=True)
tesla_revenue = tesla_revenue[tesla_revenue['Revenue'] != ""]

#Question text: Display the last 5 row of the tesla_revenue dataframe using the tail function. Take a screenshot of the results.
tesla_revenue.tail(5)

####Question 3: Use yfinance to Extract Stock Data####
#Question text: Using the Ticker function enter the ticker symbol of the stock we want to extract data on to create a ticker object. The stock is GameStop and its ticker symbol is GME.
GameStop = yf.Ticker("GME")

#Question text: Using the ticker object and the function history extract stock information and save it in a dataframe named gme_data. Set the period parameter to max so we get information for the maximum amount of time.
gme_data = GameStop.history(period="max")

#Question text: Reset the index using the reset_index(inplace=True) function on the gme_data DataFrame and display the first five rows of the gme_data dataframe using the head function. Take a screenshot of the results and code from the beginning of Question 3 to the results below.
gme_data.reset_index(inplace=True)
gme_data.head(5)

####Question 4: Use Webscraping to Extract GME Revenue Data####
#Question text: Use the requests library to download the webpage https://cf-coursesdata.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220ENSkillsNetwork/labs/project/stock.html. Save the text of the response as a variable named html_data
url="https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/stock.html"
html_data=requests.get(url).text

#Question text: Parse the html data using beautiful_soup.
beautiful_soup = BeautifulSoup(html_data,"html.parser")

#Question text: Using BeautifulSoup or the read_html function extract the table with GameStop Quarterly Revenue and store it into a dataframe named gme_revenue. The dataframe should have columns Date and Revenue. Make sure the comma and dollar sign is removed from the Revenue column using a method similar to what you did in Question 2.
gme_revenue = pd.DataFrame(columns=["Date", "Revenue"])
for row in beautiful_soup.find("tbody").find_all("tr"):
  col = row.find_all("td")
  date =col[0].text
  revenue =col[1].text
  gme_revenue = gme_revenue.append({"Date":date, "Revenue":revenue},ignore_index=True)

gme_revenue["Revenue"] = gme_revenue['Revenue'].str.replace(',|\$',"")

#Question text: Display the last five rows of the gme_revenue dataframe using the tail function. Take a screenshotof the results.
gme_revenue.tail(5)

####Question 5: Plot Tesla Stock Graph####
#Question text: Use the make_graph function to graph the Tesla Stock Data, also provide a title for the graph. The structure to call the make_graph function is make_graph(tesla_data, tesla_revenue, 'Tesla'). Note the graph will only show data upto June 2021.
make_graph(tesla_data, tesla_revenue, 'Tesla\'s Stock Data')

####Question 6: Plot GameStop Stock Graph####
#Question text: Use the make_graph function to graph the GameStop Stock Data, also provide a title for the graph. The structure to call the make_graph function is make_graph(gme_data, gme_revenue, 'GameStop'). Note the graph will only show data upto June 2021.
make_graph(gme_data, gme_revenue, 'GameStop\'s Stock Data')
